{"version":3,"sources":["components/NetflixSlider/context.js","components/Icons/IconCross.js","components/NetflixSlider/Content.js","components/Icons/IconArrowDown.js","components/NetflixSlider/SlideButton.js","components/NetflixSlider/SliderWrapper.js","components/NetflixSlider/useSliding.js","components/NetflixSlider/useSizeElement.js","components/NetflixSlider/Slider.js","components/NetflixSlider/ShowDetailsButton.js","components/NetflixSlider/Mark.js","components/NetflixSlider/Item.js","components/NetflixSlider/index.js","App.js","serviceWorker.js","index.js"],"names":["SliderContext","React","createContext","IconCross","role","xmlns","viewBox","fill","d","Content","state","imageID","updateVideo","console","log","props","movie","type","includes","id","fetch","then","r","text","result","obj","JSON","parse","setState","results","key","this","onClose","className","src","title","data","overview","onClick","Component","IconArrowDown","SlideButton","SliderWrapper","children","useSliding","elementWidth","countElements","containerRef","useRef","useState","containerWidth","setContainerWidth","distance","setDistance","totalInViewport","setTotalInViewport","viewed","setViewed","useEffect","current","clientWidth","Math","floor","handlePrev","handleNext","slideProps","style","transform","hasPrev","hasNext","useSizeElement","elementRef","width","setWidth","Slider","activeSlide","currentSlide","setCurrentSlide","Children","count","handleClose","contextValue","onSelectSlide","onCloseSlide","Provider","value","cx","ref","ShowDetailsButton","Mark","handleClick","detailsbtn","chrome","runtime","sendMessage","msg","Item","Consumer","isActive","imageBg","image","alt","App","renderWatching","watched","length","map","rendertvs","tvs","rendermovies","movies","getMoviesData","storage","local","get","recArr","stored_movie_recos","i","push","title_val","recoData","poster_path","key_title","backdrop_path","bind","getTVData","stored_tv_recos","getWatchedData","stored_titles","Data","response","webpage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ca1b01d1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SliderContext = React.createContext();\r\n\r\nexport default SliderContext;\r\n","import React from 'react';\r\n\r\nconst IconCross = () => (\r\n  <svg role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 352 512\">\r\n    <path\r\n      fill=\"currentColor\"\r\n      d=\"M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z\"\r\n    />\r\n  </svg>\r\n);\r\n\r\nexport default IconCross;\r\n","import React from \"react\";\r\nimport IconCross from \"./../Icons/IconCross\";\r\nimport \"./Content.scss\";\r\nclass Content extends React.Component {\r\n  state = {\r\n    imageID: \"\",\r\n  };\r\n  render() {\r\n    const { movie, onClose } = this.props;\r\n    return (\r\n      <div className=\"content\">\r\n        <div className=\"content__background\">\r\n          <div className=\"content__background__shadow\" />\r\n          <iframe\r\n            className=\"content__background__image\"\r\n            src={\r\n              \"https://www.youtube.com/embed/\" +\r\n              this.state.imageID +\r\n              \"?autoplay=1&amp;controls=0&amp;loop=1&amp;showinfo=0&amp;modestbranding=1&amp;disablekb=1&amp;enablejsapi=1&amp;\"\r\n            }\r\n          ></iframe>\r\n        </div>\r\n        <div className=\"content__area\">\r\n          <div className=\"content__area__container\">\r\n            <div className=\"content__title\">{movie.title}</div>\r\n            <div className=\"content__description\">{movie.data.overview}</div>\r\n          </div>\r\n          <button className=\"content__close\" onClick={onClose}>\r\n            <IconCross />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  componentDidMount() {\r\n    this.updateVideo();\r\n  }\r\n  componentDidUpdate() {\r\n    this.updateVideo();\r\n  }\r\n  updateVideo = () => {\r\n    console.log(this.props.movie);\r\n    var type = this.props.movie.type.includes(\"TV\") ? \"tv\" : \"movie\";\r\n    var id = this.props.movie.id;\r\n    console.log(\"Type: \" + type + \" ID \" + id);\r\n    var url =\r\n      \"https://api.themoviedb.org/3/\" +\r\n      type +\r\n      \"/\" +\r\n      id +\r\n      \"/videos?api_key=ddda0e20c54495aef2d2b5acce042abe&language=en-US\";\r\n\r\n    fetch(url)\r\n      .then((r) => r.text())\r\n      .then((result) => {\r\n        const obj = JSON.parse(result);\r\n        console.log(obj);\r\n        this.setState({ imageID: obj.results[0].key });\r\n      });\r\n  };\r\n}\r\n/*\r\nconst Content = ({ movie, onClose }) => (\r\n  <div className=\"content\">\r\n    <div className=\"content__background\">\r\n      <div className=\"content__background__shadow\" />\r\n      <iframe\r\n        className=\"content__background__image\"\r\n        src={\r\n          \"https://www.youtube.com/embed/\" +\r\n          \"k3CN-wR05pY\" +\r\n          \"?autoplay=1&amp;controls=0&amp;loop=1&amp;showinfo=0&amp;modestbranding=1&amp;disablekb=1&amp;enablejsapi=1&amp;\"\r\n        }\r\n      ></iframe>\r\n    </div>\r\n    <div className=\"content__area\">\r\n      <div className=\"content__area__container\">\r\n        <div className=\"content__title\">{movie.title}</div>\r\n        <div className=\"content__description\">\r\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque\r\n          et euismod ligula. Morbi mattis pretium eros, ut mollis leo tempus\r\n          eget. Sed in dui ac ipsum feugiat ultricies. Phasellus vestibulum enim\r\n          quis quam congue, non fringilla orci placerat. Praesent sollicitudin\r\n        </div>\r\n      </div>\r\n      <button className=\"content__close\" onClick={onClose}>\r\n        <IconCross />\r\n      </button>\r\n    </div>\r\n  </div>\r\n);\r\n*/\r\nconst getYoutubeID = () => {\r\n  var type = \"tv\";\r\n  var id = 1972;\r\n  var url =\r\n    \"https://api.themoviedb.org/3/\" +\r\n    type +\r\n    \"/\" +\r\n    id +\r\n    \"/videos?api_key=ddda0e20c54495aef2d2b5acce042abe&language=en-US\";\r\n\r\n  fetch(url)\r\n    .then((r) => r.text())\r\n    .then((result) => {\r\n      const obj = JSON.parse(result);\r\n      console.log(obj);\r\n      return obj.results[1].key;\r\n    });\r\n};\r\n/*\r\nvar type = \"tv\";\r\nvar id = 1972;\r\nvar url =\r\n  \"https://api.themoviedb.org/3/\" +\r\n  type +\r\n  \"/\" +\r\n  id +\r\n  \"/videos?api_key=ddda0e20c54495aef2d2b5acce042abe&language=en-US\";\r\n\r\nfetch(url)\r\n  .then((r) => r.text())\r\n  .then((result) => {\r\n    const obj = JSON.parse(result);\r\n    console.log(myRef);\r\n    var iframe = myRef.current;\r\n    iframe.src = \"https://www.youtube.com/embed/\" + obj.results[1].key;\r\n  });\r\n  */\r\nexport default Content;\r\n","import React from 'react';\r\n\r\nconst IconArrowDown = () => (\r\n  <svg role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 320 512\">\r\n    <path\r\n      fill=\"currentColor\"\r\n      d=\"M143 352.3L7 216.3c-9.4-9.4-9.4-24.6 0-33.9l22.6-22.6c9.4-9.4 24.6-9.4 33.9 0l96.4 96.4 96.4-96.4c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9l-136 136c-9.2 9.4-24.4 9.4-33.8 0z\"\r\n    />\r\n  </svg>\r\n);\r\n\r\nexport default IconArrowDown;\r\n","import React from 'react';\r\nimport IconArrowDown from './../Icons/IconArrowDown'\r\nimport './SlideButton.scss'\r\n\r\nconst SlideButton = ({ onClick, type }) => (\r\n  <button className={`slide-button slide-button--${type}`} onClick={onClick}>\r\n    <span>\r\n      <IconArrowDown />\r\n    </span>\r\n  </button>\r\n);\r\n\r\nexport default SlideButton;","import React from 'react'\r\nimport './SliderWrapper.scss'\r\n\r\nconst SliderWrapper = ({ children }) => (\r\n  <div className=\"slider-wrapper\">\r\n    {children}\r\n  </div>\r\n);\r\n\r\nexport default SliderWrapper;\r\n","import { useState, useRef, useEffect } from 'react'\r\n\r\nconst PADDINGS = 110;\r\n\r\nconst useSliding = (elementWidth, countElements) => {\r\n  const containerRef = useRef(null);\r\n  const [containerWidth, setContainerWidth] = useState(0);\r\n  const [distance, setDistance] = useState(0);\r\n  const [totalInViewport, setTotalInViewport] = useState(0)\r\n  const [viewed, setViewed] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const containerWidth = containerRef.current.clientWidth - PADDINGS;\r\n\r\n    setContainerWidth(containerWidth);\r\n    setTotalInViewport(Math.floor(containerWidth / elementWidth));\r\n  }, [containerRef.current]);\r\n\r\n  const handlePrev = () => {\r\n    setViewed(viewed - totalInViewport);\r\n    setDistance(distance + containerWidth);\r\n  }\r\n\r\n  const handleNext = () => {\r\n    setViewed(viewed + totalInViewport);\r\n    setDistance(distance - containerWidth)\r\n  }\r\n\r\n  const slideProps = {\r\n    style: { transform: `translate3d(${distance}px, 0, 0)` }\r\n  };\r\n\r\n  const hasPrev = distance < 0;\r\n  const hasNext = (viewed + totalInViewport) < countElements;\r\n\r\n  return { handlePrev, handleNext, slideProps, containerRef, hasPrev, hasNext };\r\n}\r\n\r\nexport default useSliding;","import { useState, useRef, useEffect } from 'react'\r\n\r\nconst useSizeElement = () => {\r\n  const elementRef = useRef(null);\r\n  const [width, setWidth] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setWidth(elementRef.current.clientWidth);\r\n  }, [elementRef.current]);\r\n\r\n  return { width, elementRef };\r\n}\r\n\r\nexport default useSizeElement;","import React, { useState } from \"react\";\r\nimport cx from \"classnames\";\r\nimport SliderContext from \"./context\";\r\nimport Content from \"./Content\";\r\nimport SlideButton from \"./SlideButton\";\r\nimport SliderWrapper from \"./SliderWrapper\";\r\nimport useSliding from \"./useSliding\";\r\nimport useSizeElement from \"./useSizeElement\";\r\nimport \"./Slider.scss\";\r\n\r\nconst Slider = ({ children, activeSlide }) => {\r\n  const [currentSlide, setCurrentSlide] = useState(activeSlide);\r\n  const { width, elementRef } = useSizeElement();\r\n  const {\r\n    handlePrev,\r\n    handleNext,\r\n    slideProps,\r\n    containerRef,\r\n    hasNext,\r\n    hasPrev,\r\n  } = useSliding(width, React.Children.count(children));\r\n\r\n  const handleSelect = (movie) => {\r\n    setCurrentSlide(movie);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setCurrentSlide(null);\r\n  };\r\n\r\n  const contextValue = {\r\n    onSelectSlide: handleSelect,\r\n    onCloseSlide: handleClose,\r\n    elementRef,\r\n    currentSlide,\r\n  };\r\n\r\n  return (\r\n    <SliderContext.Provider value={contextValue}>\r\n      <SliderWrapper>\r\n        <div className={cx(\"slider\", { \"slider--open\": currentSlide != null })}>\r\n          <div ref={containerRef} className=\"slider__container\" {...slideProps}>\r\n            {children}\r\n          </div>\r\n        </div>\r\n        {hasPrev && <SlideButton onClick={handlePrev} type=\"prev\" />}\r\n        {hasNext && <SlideButton onClick={handleNext} type=\"next\" />}\r\n      </SliderWrapper>\r\n      {currentSlide && <Content movie={currentSlide} onClose={handleClose} />}\r\n    </SliderContext.Provider>\r\n  );\r\n};\r\n\r\nexport default Slider;\r\n","import React from 'react';\r\nimport IconArrowDown from './../Icons/IconArrowDown'\r\nimport './ShowDetailsButton.scss'\r\n\r\nconst ShowDetailsButton = ({ onClick }) => (\r\n  <button onClick={onClick} className=\"show-details-button\">\r\n    <span>\r\n      <IconArrowDown />\r\n    </span>\r\n  </button>\r\n);\r\n\r\nexport default ShowDetailsButton;\r\n","import React from 'react'\r\nimport './Mark.scss'\r\n\r\nconst Mark = () => (<div className=\"mark\" />)\r\n\r\nexport default Mark;\r\n","import React from \"react\";\r\nimport cx from \"classnames\";\r\nimport SliderContext from \"./context\";\r\nimport ShowDetailsButton from \"./ShowDetailsButton\";\r\nimport Mark from \"./Mark\";\r\nimport \"./Item.scss\";\r\n/* global chrome */\r\nconst Item = ({ movie }) => (\r\n  <SliderContext.Consumer>\r\n    {({ onSelectSlide, currentSlide, elementRef }) => {\r\n      const isActive = currentSlide && currentSlide.id === movie.id;\r\n\r\n      return (\r\n        <div\r\n          onClick={() => handleClick(movie)}\r\n          ref={elementRef}\r\n          className={cx(\"item\", {\r\n            \"item--open\": isActive,\r\n          })}\r\n        >\r\n          <img src={movie.detailsbtn ? movie.imageBg : movie.image} alt=\"\" />\r\n          {movie.detailsbtn && (\r\n            <ShowDetailsButton onClick={() => onSelectSlide(movie)} />\r\n          )}\r\n          {isActive && <Mark />}\r\n        </div>\r\n      );\r\n    }}\r\n  </SliderContext.Consumer>\r\n);\r\n\r\nconst handleClick = (movie) => {\r\n  console.log(movie);\r\n\r\n  if (!movie.detailsbtn) {\r\n    chrome.runtime.sendMessage({\r\n      msg: \"go to new tab\",\r\n      type: movie.type,\r\n      data: movie.data,\r\n    });\r\n  }\r\n};\r\n\r\nconst getYoutubeLink = () => {\r\n  var type = \"tv\";\r\n  var id = 1972;\r\n  var url =\r\n    \"https://api.themoviedb.org/3/\" +\r\n    type +\r\n    \"/\" +\r\n    id +\r\n    \"/videos?api_key=ddda0e20c54495aef2d2b5acce042abe&language=en-US\";\r\n\r\n  fetch(url)\r\n    .then((r) => r.text())\r\n    .then((result) => {\r\n      const obj = JSON.parse(result);\r\n      console.log(\"obj\");\r\n      var iframe = document.getElementById(\"vid\");\r\n      iframe.src = \"https://www.youtube.com/embed/\" + obj.results[1].key;\r\n    });\r\n};\r\n\r\nexport default Item;\r\n","import Slider from './Slider'\r\nimport Item from './Item'\r\n\r\nSlider.Item = Item;\r\n\r\nexport default Slider;\r\n","import React, { Component } from \"react\";\r\nimport Slider from \"./components/NetflixSlider\";\r\nimport \"./App.scss\";\r\n/* global chrome */\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      movies: [],\r\n      tvs: [],\r\n      watched: [],\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <h2>Recently Watched</h2>\r\n        {this.renderWatching()}\r\n        <h2>TV suggested for you</h2>\r\n        {this.rendertvs()}\r\n        <h2>Movies suggested for you</h2>\r\n        {this.rendermovies()}\r\n      </div>\r\n    );\r\n  }\r\n  componentDidMount() {\r\n    this.getMoviesData();\r\n    this.getTVData();\r\n    this.getWatchedData();\r\n    chrome.runtime.sendMessage(\r\n      { msg: \"ack by new tab\" },\r\n      function (response) {\r\n        console.log(response);\r\n        if (response.webpage) {\r\n          let movies = this.state.movies;\r\n          for (var i = 0; i < movies.length; i++) {\r\n            movies[i].detailsbtn = true;\r\n          }\r\n          let tvs = this.state.tvs;\r\n          for (var i = 0; i < tvs.length; i++) {\r\n            tvs[i].detailsbtn = true;\r\n          }\r\n          let watched = this.state.watched;\r\n          for (var i = 0; i < watched.length; i++) {\r\n            watched[i].detailsbtn = true;\r\n          }\r\n          this.setState({ movies, tvs, watched });\r\n        }\r\n      }.bind(this)\r\n    );\r\n  }\r\n  renderWatching = () => {\r\n    return this.state.watched.length !== 0 ? (\r\n      <Slider>\r\n        {this.state.watched.map((movie) => (\r\n          <Slider.Item movie={movie} key={movie.id}>\r\n            item1\r\n          </Slider.Item>\r\n        ))}\r\n      </Slider>\r\n    ) : null;\r\n  };\r\n  rendertvs = () => {\r\n    return this.state.tvs.length !== 0 ? (\r\n      <Slider>\r\n        {this.state.tvs.map((movie) => (\r\n          <Slider.Item movie={movie} key={movie.id}>\r\n            item1\r\n          </Slider.Item>\r\n        ))}\r\n      </Slider>\r\n    ) : null;\r\n  };\r\n  rendermovies = () => {\r\n    return this.state.movies.length !== 0 ? (\r\n      <Slider>\r\n        {this.state.movies.map((movie) => (\r\n          <Slider.Item movie={movie} key={movie.id}>\r\n            item1\r\n          </Slider.Item>\r\n        ))}\r\n      </Slider>\r\n    ) : null;\r\n  };\r\n  getMoviesData = () => {\r\n    let movies = this.state.movies;\r\n    chrome.storage.local.get(\r\n      \"stored_movie_recos\",\r\n      function (data) {\r\n        // Gets the titles from local storage\r\n        var recArr = data.stored_movie_recos;\r\n        for (var i = 0; i < recArr.length; i++) {\r\n          movies.push({\r\n            image:\r\n              \"https://image.tmdb.org/t/p/w92\" +\r\n              recArr[i].title_val.recoData.poster_path,\r\n            title: recArr[i].key_title,\r\n            type: \"reco Movie\",\r\n            id: recArr[i].title_val.recoData.id,\r\n            data: recArr[i].title_val.recoData,\r\n            detailsbtn: false,\r\n            imageBg:\r\n              \"https://image.tmdb.org/t/p/w300\" +\r\n              recArr[i].title_val.recoData.backdrop_path,\r\n          });\r\n        }\r\n        this.setState({ movies });\r\n      }.bind(this)\r\n    );\r\n  };\r\n  getTVData = () => {\r\n    let tvs = this.state.tvs;\r\n    chrome.storage.local.get(\r\n      \"stored_tv_recos\",\r\n      function (data) {\r\n        var recArr = data.stored_tv_recos;\r\n        for (var i = 0; i < recArr.length; i++) {\r\n          tvs.push({\r\n            image:\r\n              \"https://image.tmdb.org/t/p/w92\" +\r\n              recArr[i].title_val.recoData.poster_path,\r\n            title: recArr[i].key_title,\r\n            type: \"reco TV\",\r\n            id: recArr[i].title_val.recoData.id,\r\n            data: recArr[i].title_val.recoData,\r\n            detailsbtn: false,\r\n            imageBg:\r\n              \"https://image.tmdb.org/t/p/w300\" +\r\n              recArr[i].title_val.recoData.backdrop_path,\r\n          });\r\n        }\r\n        this.setState({ tvs });\r\n      }.bind(this)\r\n    );\r\n  };\r\n  getWatchedData = () => {\r\n    let watched = this.state.watched;\r\n    chrome.storage.local.get(\r\n      \"stored_titles\",\r\n      function (data) {\r\n        // Gets the titles from local storage\r\n        var recArr = data.stored_titles;\r\n        for (var i = 0; i < recArr.length; i++) {\r\n          watched.push({\r\n            image:\r\n              \"https://image.tmdb.org/t/p/w92\" +\r\n              recArr[i].title_val.Data.poster_path,\r\n            title: recArr[i].key_title,\r\n            type: recArr[i].title_val.type,\r\n            id: recArr[i].title_val.Data.id,\r\n            data: recArr[i].title_val.Data,\r\n            detailsbtn: false,\r\n            imageBg:\r\n              \"https://image.tmdb.org/t/p/w300\" +\r\n              recArr[i].title_val.Data.backdrop_path,\r\n          });\r\n        }\r\n        this.setState({ watched: watched });\r\n      }.bind(this)\r\n    );\r\n  };\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}